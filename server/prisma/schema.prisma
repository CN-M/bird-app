// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  profileName String 
  password String 
  bio String? 
  profilePicture String?
  isPremium Boolean @default(false)
  posts Post[]
  bookmarks Bookmark[]
  comments Comment[]
  likes Like[]
  followers Follower[] @relation("Followers")
  following Follower[] @relation("Following")
}

model Bookmark {
  id String @id @default(uuid())
  userId String
  postId String
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Post {
  id String @id @default(uuid())
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId String
  likes Like[]
  comments Comment[]
  bookmarks Bookmark[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())
  content String
  author User @relation(fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  authorId String
  postId String
  parentComment Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies Comment[] @relation("CommentReplies")
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post? @relation(fields: [postId], references: [id])
  postId String?
  comment Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  createdAt DateTime @default(now())
}

model Follower {
  id String @id @default(uuid())
  follower User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Followers", fields: [followingId], references: [id])
  followerId String
  followingId String
  createdAt DateTime @default(now())
}
